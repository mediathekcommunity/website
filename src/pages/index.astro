---
import Layout from "../layouts/default.astro";
import HeroSlider from "../components/HeroSlider.astro";
import Card from "../components/Card.astro";
import { getCollection } from "astro:content";

// Get all details from content collection and filter out fallback entries
const allDetailsRaw = await getCollection("details");
const allDetails = allDetailsRaw.filter(
  (entry: any) => entry.data.id !== "fallback"
);

// Function to calculate remaining days from onlineuntil date in visitor's local time
function calculateRemainingDays(onlineuntil: string): number {
  const currentDate = new Date();

  // Handle both date formats: "2025-06-24" and "2025-06-24T23:59:59Z"
  let expiryDate: Date;
  if (onlineuntil.includes("T")) {
    // Full ISO format with time
    expiryDate = new Date(onlineuntil);
  } else {
    // Date-only format, treat as end of day in local timezone
    expiryDate = new Date(onlineuntil + "T23:59:59");
  }

  // Convert to local dates (removing time component) for accurate day calculation
  const currentLocalDate = new Date(
    currentDate.getFullYear(),
    currentDate.getMonth(),
    currentDate.getDate()
  );
  const expiryLocalDate = new Date(
    expiryDate.getFullYear(),
    expiryDate.getMonth(),
    expiryDate.getDate()
  );

  const diffTime = expiryLocalDate.getTime() - currentLocalDate.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return Math.max(0, diffDays); // Return 0 if expired
}

// Convert details collection to hero items and card data
const heroItems = allDetails.length > 0
  ? allDetails.slice(0, 3).map((entry: any) => ({
      backdrop: entry.data.info.backdrop || "/8zLyVhEsH6SM9diX7CUUWcaRlk0.jpg",
      title: entry.data.title,
      orgtitle: entry.data.orgtitle,
      id: entry.data.id,
      channel: {
        country: entry.data.info.channel.country,
        icon: entry.data.info.channel.name?.toLowerCase() || "unknown",
      },
      quality: entry.data.info.quality || "HD",
      type: entry.data.info.type,
      channelicon:
        entry.data.info.type === "movie"
          ? "simple-icons:warnerbros"
          : "simple-icons:netflix",
    }))
  : [{
      backdrop: "https://images.unsplash.com/photo-1489599743717-9c7b9b6ea9c4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080&q=80",
      title: "No content available at the moment",
      orgtitle: "",
      id: "no-content-placeholder",
      channel: {
        country: "de",
        icon: "unknown",
      },
      quality: "HD",
      type: "movie",
      channelicon: "mdi:television-off",
    }];

// Convert details collection to card data with calculated remaining days
// Sort by created timestamp in descending order (newest first) for "Recently Added"
const sortedDetails = allDetails.sort((a: any, b: any) => {
  const dateA = a.data.created ? new Date(a.data.created).getTime() : 0;
  const dateB = b.data.created ? new Date(b.data.created).getTime() : 0;
  return dateB - dateA; // Descending order (newest first)
});

const cardData = sortedDetails.map((entry: any) => ({
  id: entry.data.id, // Use the actual ID from collection instead of generating one
  title: entry.data.title,
  orgtitle: entry.data.orgtitle,
  metascore: entry.data.info.metascore || "N/A",
  type: entry.data.info.type,
  poster: entry.data.info.poster || "/mzkstyDSsTRswCMRvoBD5ULPnIt.jpg",
  channel: { country: entry.data.info.channel.country },
  remainingDays: calculateRemainingDays(entry.data.info.onlineuntil),
}));

// Filter collection entries by country
const entriesByCountry = allDetails.reduce((acc: Record<string, any[]>, entry: any) => {
  const country = entry.data.info.channel.country;
  if (!acc[country]) {
    acc[country] = [];
  }
  acc[country].push(entry);
  return acc;
}, {});
---

<Layout>
  <div class="flex flex-col min-h-screen">
    <HeroSlider heroItems={heroItems} special={true} showcountry={true} />

    <!-- Recently Added Section -->
    <div class="px-4 sm:px-6 md:px-8">
      <h2 class="text-base-content text-xl sm:text-2xl font-bold my-4 sm:my-6 md:my-8">Recently Added</h2>

      <!-- Card Carousel -->
      <div class="card-carousel embla">
        <div class="embla__container">
          {
            cardData.map((card) => (
              <div class="embla__slide">
                <Card carddata={card} countryflag="true"/>
              </div>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Country Sections -->
    {
      Object.keys(entriesByCountry).map((country, index, array) => {
        const isLast = index === array.length - 1;
        const countryEntries = entriesByCountry[country];
        const countryCardData = countryEntries.map((entry: any) => ({
          id: entry.data.id,
          title: entry.data.title,
          orgtitle: entry.data.orgtitle,
          metascore: entry.data.info.metascore || "N/A",
          type: entry.data.info.type,
          poster: entry.data.info.poster || "/mzkstyDSsTRswCMRvoBD5ULPnIt.jpg",
          channel: { country: entry.data.info.channel.country },
          remainingDays: calculateRemainingDays(entry.data.info.onlineuntil),
        }));

        return (
          <div class="px-4 sm:px-6 md:px-8">
            <h2 class="text-base-content text-xl sm:text-2xl font-bold my-4 sm:my-6 md:my-8 flex items-center gap-1 sm:gap-2">
              <span class={`fi fi-${country.toLowerCase()} fis`}></span>
              {country.toUpperCase()} Content
            </h2>

            <!-- Card Carousel -->
            <div class={`card-carousel embla ${isLast ? "last-carousel" : ""}`}>
              <div class="embla__container">
                {
                  countryCardData.map((card) => (
                    <div class="embla__slide">
                      <Card carddata={card}  />
                    </div>
                  ))
                }
              </div>
            </div>
          </div>
        );
      })
    }
  </div>
</Layout>

<script>
  // @ts-nocheck
  import EmblaCarousel from "embla-carousel";

  document.addEventListener("DOMContentLoaded", () => {
    const emblaNode = document.querySelector(".card-carousel");
    if (emblaNode) {
      const options = {
        align: "start",
        containScroll: "trimSnaps", 
        dragFree: true,
        slidesToScroll: 1,
      };

      const emblaApi = EmblaCarousel(emblaNode, options);
    }
  });
</script>

<style>
  :root {
    color-scheme: dark;
  }

  .card-carousel {
    overflow: hidden;
    position: relative;
    width: 100%;
    margin-bottom: 0rem;
  }

  .embla__container {
    display: flex;
    gap: 1.5rem;
    user-select: none;
    -webkit-touch-callout: none;
    -khtml-user-select: none;
    -webkit-tap-highlight-color: transparent;
    margin-left: -1.5rem;
  }

  .embla__slide {
    flex: 0 0 auto;
    min-width: 0;
    padding-left: 1.5rem;
  }

  /* Responsive slide sizes */
  @media (max-width: 640px) {
    .embla__slide {
      width: 70%;
    }

    .px-8 {
      padding-left: 1rem;
      padding-right: 1rem;
    }

    .card-carousel {
      margin-bottom: 0rem;
    }
  }
  @media (min-width: 641px) and (max-width: 768px) {
    .embla__slide {
      width: 50%;
    }
  }
  @media (min-width: 769px) and (max-width: 1024px) {
    .embla__slide {
      width: 33.333%;
    }
  }
  @media (min-width: 1025px) and (max-width: 1279px) {
    .embla__slide {
      width: 25%;
    }
  }
  @media (min-width: 1280px) {
    .embla__slide {
      width: 20%;
    }
  }

  /* Special margin for the last country carousel */
  .last-carousel {
    margin-bottom: 4rem !important; /* Add extra bottom margin to the last carousel */
  }
  
  @media (max-width: 640px) {
    .last-carousel {
      margin-bottom: 3rem !important; /* Slightly smaller margin on mobile */
    }
  }
</style>
