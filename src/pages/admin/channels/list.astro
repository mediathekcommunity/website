---
import AdminLayout from "../../../layouts/AdminLayout.astro";

// Authentication check
const isAuthenticated = Astro.locals.isAuthenticated;
if (!isAuthenticated) {
	return Astro.redirect('/login');
}

// Fetch channels data
let channels = [];
let error = null;

try {
	const channelsRes = await fetch(
		`${Astro.url.origin}/api/channels?source=local`,
	);
	const channelsData = await channelsRes.json();

	if (channelsData.success && channelsData.channels) {
		channels = channelsData.channels;
	} else {
		error = channelsData.error || "Failed to load channels";
	}
} catch (err) {
	error = "Failed to connect to the database";
}

// Group channels by country
const channelsByCountry = channels.reduce((acc: any, channel: any) => {
	const country = channel.country || "Unknown";
	if (!acc[country]) acc[country] = [];
	acc[country].push(channel);
	return acc;
}, {});

const stats = {
	total: channels.length,
	countries: Object.keys(channelsByCountry).length,
	byCountry: channelsByCountry,
};
---

<AdminLayout>
  <!-- Header -->
  <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8">
    <div>
      <div class="breadcrumbs text-sm">
        <ul>
          <li><a href="/admin">Dashboard</a></li>
          <li><a href="/admin/channels">Channels</a></li>
          <li>Channel List</li>
        </ul>
      </div>
      <h1 class="text-3xl font-bold text-base-content">Channel Management</h1>
      <p class="text-base-content/70 mt-1">Manage TV channels and streaming sources</p>
    </div>
    <div class="flex gap-2">
      <a href="/admin/channels/create" class="btn btn-primary gap-2">
        <span>‚ûï</span>
        Add Channel
      </a>
      <button class="btn btn-outline gap-2" onclick="location.reload()">
        <span>üîÑ</span>
        Refresh
      </button>
    </div>
  </div>

  <!-- Statistics -->
  <div class="stats stats-vertical lg:stats-horizontal shadow mb-8 w-full">
    <div class="stat place-items-center">
      <div class="stat-figure text-primary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h4a1 1 0 110 2h-1v14a2 2 0 01-2 2H6a2 2 0 01-2-2V6H3a1 1 0 110-2h4z" />
        </svg>
      </div>
      <div class="stat-title">Total Channels</div>
      <div class="stat-value text-primary">{stats.total}</div>
      <div class="stat-desc">Available channels</div>
    </div>

    <div class="stat place-items-center">
      <div class="stat-figure text-secondary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
      <div class="stat-title">Countries</div>
      <div class="stat-value text-secondary">{stats.countries}</div>
      <div class="stat-desc">Coverage areas</div>
    </div>

    <div class="stat place-items-center">
      <div class="stat-figure text-success">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
        </svg>
      </div>
      <div class="stat-title">Most Popular</div>
      <div class="stat-value text-success">{Object.keys(channelsByCountry).reduce((a, b) => channelsByCountry[a]?.length > channelsByCountry[b]?.length ? a : b, 'N/A')}</div>
      <div class="stat-desc">Country with most channels</div>
    </div>
  </div>

  <!-- Filter and Search -->
  <div class="card bg-base-100 shadow-xl mb-6">
    <div class="card-body">
      <div class="flex flex-col lg:flex-row gap-4">
        <div class="form-control flex-1">
          <label class="label">
            <span class="label-text">Search Channels</span>
          </label>
          <input type="text" placeholder="Search by name..." class="input input-bordered w-full" id="channel-search" />
        </div>
        <div class="form-control">
          <label class="label">
            <span class="label-text">Filter by Country</span>
          </label>
          <select class="select select-bordered w-full max-w-xs" id="country-filter">
            <option value="">All Countries</option>
            {Object.keys(channelsByCountry).sort().map(country => (
              <option value={country}>{country.toUpperCase()}</option>
            ))}
          </select>
        </div>
      </div>
    </div>
  </div>

  {error ? (
    <div class="alert alert-error mb-6">
      <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <span>{error}</span>
    </div>
  ) : null}

  <!-- Channels Table -->
  {channels.length > 0 ? (
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <div class="overflow-x-auto">
          <table class="table table-zebra w-full">
            <thead>
              <tr>
                <th>Channel</th>
                <th>Country</th>
                <th>Icon</th>
                <th>Created</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="channels-table-body">
              {channels.map((channel: any) => (
                <tr class="channel-row" data-name={channel.name?.toLowerCase()} data-country={channel.country}>
                  <td>
                    <div class="flex items-center gap-3">
                      <div class="font-bold">{channel.name}</div>
                    </div>
                  </td>
                  <td>
                    <div class="flex items-center gap-2">
                      <span class={`fi fi-${channel.country?.toLowerCase()} w-6 h-4`}></span>
                      <span class="badge badge-ghost badge-sm">{channel.country?.toUpperCase()}</span>
                    </div>
                  </td>
                  <td>
                    {channel.icon ? (
                      <div class="avatar">
                        <div class="w-8 h-8">
                          <img src={channel.icon} alt={channel.name} class="rounded" />
                        </div>
                      </div>
                    ) : (
                      <span class="text-2xl">üì∫</span>
                    )}
                  </td>
                  <td>
                    <span class="text-sm text-base-content/70">
                      {channel.created ? new Date(channel.created).toLocaleDateString() : 'Unknown'}
                    </span>
                  </td>
                  <td>
                    <div class="flex gap-2">
                      <a href={`/admin/channels/edit/${channel.id}`} class="btn btn-ghost btn-xs">
                        ‚úèÔ∏è Edit
                      </a>
                      <button 
                        class="btn btn-ghost btn-xs text-error" 
                        onclick={`deleteChannel('${channel.id}', '${channel.name}')`}>
                        üóëÔ∏è Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  ) : !error ? (
    <!-- Empty State -->
    <div class="text-center py-16">
      <div class="text-6xl mb-4">üì∫</div>
      <h3 class="text-xl font-bold mb-2">No channels found</h3>
      <p class="text-base-content/70 mb-4">Start by adding your first channel</p>
      <a href="/admin/channels/create" class="btn btn-primary">
        Add First Channel
      </a>
    </div>
  ) : null}
</AdminLayout>

<script>
  // Search and Filter functionality
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('channel-search');
    const countryFilter = document.getElementById('country-filter');
    const channelRows = document.querySelectorAll('.channel-row');

    function filterChannels() {
      const searchTerm = searchInput?.value?.toLowerCase() || '';
      const selectedCountry = countryFilter?.value || '';

      channelRows.forEach(row => {
        const name = row.dataset.name || '';
        const country = row.dataset.country || '';

        const matchesSearch = name.includes(searchTerm);
        const matchesCountry = !selectedCountry || country === selectedCountry;

        if (matchesSearch && matchesCountry) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      });
    }

    searchInput?.addEventListener('input', filterChannels);
    countryFilter?.addEventListener('change', filterChannels);
  });

  // Delete channel function
  async function deleteChannel(channelId, channelName) {
    if (!confirm(`Are you sure you want to delete "${channelName}"? This action cannot be undone.`)) {
      return;
    }

    try {
      const response = await fetch(`/api/delete-channel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: channelId }),
      });

      const result = await response.json();

      if (response.ok && result.success) {
        alert('Channel deleted successfully!');
        window.location.reload();
      } else {
        alert('Failed to delete channel: ' + (result.error || 'Unknown error'));
      }
    } catch (error) {
      alert('Failed to delete channel due to network error.');
    }
  }
</script>

<style>
  /* Flag icons */
  .fi {
    display: inline-block;
    background-size: contain;
    background-position: 50%;
    background-repeat: no-repeat;
  }
  
  .fi-de { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 5 3'%3E%3Cpath fill='%23000' d='M0 0h5v1H0z'/%3E%3Cpath fill='%23D00' d='M0 1h5v1H0z'/%3E%3Cpath fill='%23FFCE00' d='M0 2h5v1H0z'/%3E%3C/svg%3E"); }
  .fi-gb { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 60 30'%3E%3Cpath fill='%23012169' d='M0 0h60v30H0z'/%3E%3Cpath fill='white' d='m0 0 60 30m0-30L0 30'/%3E%3Cpath fill='%23C8102E' d='m0 0 60 30m0-30L0 30' stroke='%23FFF' stroke-width='6'/%3E%3Cpath fill='white' d='M30 0v30M0 15h60'/%3E%3Cpath fill='%23C8102E' d='M30 0v30M0 15h60' stroke='%23C8102E' stroke-width='4'/%3E%3C/svg%3E"); }
  .fi-se { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 10'%3E%3Cpath fill='%23006AA7' d='M0 0h16v10H0z'/%3E%3Cpath fill='%23FECC00' d='M0 4h5v2h11V4H5V0h2v4h9v2H7v4H5V6H0V4z'/%3E%3C/svg%3E"); }
  .fi-fr { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 3 2'%3E%3Cpath fill='%23002395' d='M0 0h1v2H0z'/%3E%3Cpath fill='white' d='M1 0h1v2H1z'/%3E%3Cpath fill='%23ED2939' d='M2 0h1v2H2z'/%3E%3C/svg%3E"); }
</style>
