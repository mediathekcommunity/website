name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=production
        labels: |
          org.opencontainers.image.title=${{ github.repository }}
          org.opencontainers.image.description=SvelteKit Media Application
          org.opencontainers.image.vendor=Media Community

    - name: Create production environment file
      run: |
        cat > .env << EOF
        # Production Environment Variables  
        NODE_ENV="production"
        
        # Production Database
        DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}"
        DATABASE_AUTH_TOKEN="${{ secrets.PROD_DATABASE_AUTH_TOKEN }}"
        
        # Authentication (shared between dev/prod for admin access)
        PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.PUBLIC_CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
        
        AUTH_SECRET="${{ secrets.AUTH_SECRET }}"
        AUTH0_CLIENT_ID="${{ secrets.AUTH0_CLIENT_ID }}"
        AUTH0_CLIENT_SECRET="${{ secrets.AUTH0_CLIENT_SECRET }}"
        AUTH0_ISSUER_BASE_URL="${{ secrets.AUTH0_ISSUER_BASE_URL }}"
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          GIT_SHA=${{ github.sha }}
        cache-from: |
          type=gha,scope=prod
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: |
          type=gha,mode=max,scope=prod
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        provenance: mode=max
        sbom: true

    - name: Clean up environment file
      if: always()
      run: rm -f .env

    - name: Build notification
      run: |
        echo "🚀 Docker image built and pushed successfully!"
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "🏷️  Tags: ${{ steps.meta.outputs.tags }}"
        echo "🏗️  Architecture: amd64"

    - name: Cleanup old images
      run: |
        echo "🧹 Cleaning up old images, keeping only the last 3..."
        
        # Get all tags for the repository, sorted by creation date (newest first)
        REPO_NAME="${{ env.IMAGE_NAME }}"
        
        # Get all package versions (tags) excluding 'latest' and 'production'
        gh api --paginate \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/user/packages/container/${REPO_NAME##*/}/versions" \
          --jq '.[] | select(.metadata.container.tags | length > 0 and (. | contains(["latest", "production"]) | not)) | {id: .id, tags: .metadata.container.tags, created_at: .created_at}' \
          | jq -s 'sort_by(.created_at) | reverse' > versions.json
        
        # Keep only the 3 most recent versions, delete the rest
        VERSIONS_TO_DELETE=$(cat versions.json | jq -r '.[3:] | .[].id')
        
        if [ -n "$VERSIONS_TO_DELETE" ]; then
          echo "Deleting old image versions:"
          echo "$VERSIONS_TO_DELETE" | while read -r version_id; do
            if [ -n "$version_id" ]; then
              echo "  Deleting version ID: $version_id"
              gh api --method DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/user/packages/container/${REPO_NAME##*/}/versions/$version_id" || echo "    Failed to delete $version_id"
            fi
          done
          echo "✅ Cleanup completed"
        else
          echo "✅ No old images to cleanup"
        fi
        
        rm -f versions.json
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    if: success()
    permissions:
      contents: read
    
    steps:
    - name: Update container image on Magic Containers
      uses: BunnyWay/actions/container-update-image@main
      with:
        app_id: ${{ secrets.APP_ID }}
        api_key: ${{ secrets.BUNNYNET_API_KEY }}
        container: app
        image_tag: "sha-${{ github.sha }}"

    - name: Deploy notification
      run: |
        echo "� Production container updated on Magic Containers with SHA: ${{ github.sha }}"
